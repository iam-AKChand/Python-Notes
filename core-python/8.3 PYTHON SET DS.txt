	            SET  DATA  STRUCTURE

Creating sets:
#Empty set
PySet=set()
print(type(PySet))#<class 'set'>
print(PySet)#set()

#Empty curly brackerts are dictionary
PySet={}
print(type(PySet))#<class 'dict'>
print(PySet)#{}

#Creating set with integer data
PySet={1,2,3,4,5}
print(type(PySet))#<class 'set'>
print(PySet)#{1, 2, 3, 4, 5}

#Creating set with string data
Pyset={"PYTHON"}
print(type(PySet))#<class 'set'>
print(PySet)#{'PYTHON'}

#Fruits
Fruit_Basket={"Apple","Banana","Guava","Apple","Mango","Banana"}
print(type(Fruit_Basket))#<class 'set'>
print(Fruit_Basket)#{'Apple', 'Banana', 'Mango', 'Guava'}

SET  methods:
1///  add ( ):
#Example 1
PySet={}
print(PySet)#{}
PySet.add(1)
print(PySet)#AttributeError: 'dict' object has no attribute 'add'

#Example 2
PySet={1}
print(PySet)#{1}
PySet.add(1)
print(PySet)#{1}

#Example 3
PySet={1}
print(PySet)#{1}
PySet.add(1,2,3)
print(PySet)#TypeError: add() takes exactly one argument (3 given)

#Example 4  ( Adding tuple to a set)
vowels={'a','e','u'}
tup=('i','o')
vowels.add(tup)
print('vowels are:',vowels)#vowels are: {('i', 'o'), 'a', 'u', 'e'}

2///  set update ( ):
A={1,2,3,4}
print(A)#{1, 2, 3, 4}
B={5,6,7,8,9}
print(B)#{5, 6, 7, 8, 9}
print(A.update(B))#None
print(A)#{1, 2, 3, 4, 5, 6, 7, 8, 9}

3/// set pop ( ):
A={1,2,3,4}
print(A)#{1, 2, 3, 4}
print(A.pop())#1
print(A)#{2, 3, 4}
print(A.pop())#2
print(A)#{3, 4}

4/// set remove ( ):
A={1,2,3,4}
print(A)#{1, 2, 3, 4}
A.remove(3)#1
print(A)#{1, 2, 4}

5/// set discard ( ):
A={1,2,3,4}
print(A)#{1, 2, 3, 4}
A.discard(3)#1
print(A)#{1, 2, 4}
A={1,2,3,4}
print(A)#{1, 2, 3, 4}
A.discard(1)
print(A)#{2, 3, 4}

6/// set clear ( ):
PySet={1,2,3,4,5}
print(PySet)#{1, 2, 3, 4, 5}
PySet.clear()
print(PySet)#set()

7/// intersections(s) (AND)
x={"a","b","c","d","e"}
y={"c","d","e","f","g"}
print(x.intersection(y))#{'d', 'c', 'e'}
print(x & y)#{'d', 'c', 'e'}  # "&" = ampersand operator

8/// intersection_update ( ):
x={"a","b","c","d","e"}
y={"c","d","e","f","g"}
x.intersection_update(y)
print(x)#{'d', 'c', 'e'}

9/// set union ( ):
x={"a","b","c","d","e"}
y={"c","d","e","f","g"}
print(x.union(y))#{'f', 'b', 'a', 'c', 'g', 'd', 'e'}

a={1,2,3,4,5}
b={6,7,8,9}
print(a.union(b))#{1, 2, 3, 4, 5, 6, 7, 8, 9}
print(b.union(a))#{1, 2, 3, 4, 5, 6, 7, 8, 9}

10/// set difference ( ):
a={1,2,3,4,5,8}
b={4,2,6,7,8,9}
print(a.difference(b))#{1, 3, 5}
print(b.difference(a))#{9, 6, 7}

11/// set difference_update ( ):
a={1,2,3,4,5,8}
b={4,2,6,7,8,9}
a.difference_update(b)
print(a)#{1, 3, 5}

a={1,2,3,4,5,8}
b={4,2,6,7,8,9}
b.difference_update(a)
print(b)#{6, 7, 9}

12/// set symmetric_difference ( ):
A={'a','b','c','d'}
B={'c','d','e'}
C={}
print(A.symmetric_difference(B))#{'b', 'a', 'e'}
print(B.symmetric_difference(A))#{'b', 'a', 'e'}
print(A.symmetric_difference(C))#{'b', 'a', 'c', 'd'}
print(B.symmetric_difference(C))#{'d', 'c', 'e'}

13/// set symmetric_difference_update ( ):
setx=set(["PY","ML","DL"])
sety=set(["DL","AI","DS"])
setx.symmetric_difference_update(sety)
print(setx)#{'ML', 'DS', 'AI', 'PY'}

14/// set issuper set ( ):
a={1,2,3,4,5}
b={1,2,3,4}
c={1,2,3}
print(a.issuperset(b))#True
print(b.issuperset(a))#False
print(c.issuperset(b))#False

15/// set issub set ( ):
a={1,2,3,4,5}
b={1,2,3,4}
c={1,2,3}
print(a.issuperset(b))#False
print(b.issuperset(a))#True
print(c.issuperset(b))#True

16/// isdisjoint ( ):
 a={1,2,3,4}
b={5,6,7,0}
print(a.isdisjoint(b))#True
a={1,2,3,4}
b={5,6,7,4}
print(b.isdisjoint(a))#False

17/// set copy ( ):
a={1,2,3,4}
print(a.copy())#{1, 2, 3, 4}
b={5,6,7,4}
print(b.copy())#{4, 5, 6, 7}

>>Built-in Functions with set:
1/// all( ):
s={1,2,3,4,5}
print(all(s))#True

s={0,1,3,6,7}
print(all(s))#False

s={0,False}
print(all(s))#False

s={0,False,7}
print(all(s))#False

s={ }
print(all(s))#True

2/// any ( )
s={1,2,3,4,5}
print(any(s))#True

s={0,1,3,6,7}
print(any(s))#True

s={0,False}
print(any(s))#False

s={0,False,7}
print(any(s))#True

s={}
print(any(s))#False

3/// enumerate ( ):
PySet={"DS","BD","ML","DL"}
print(PySet)#{'DL', 'DS', 'BD', 'ML'}
ESet=enumerate(PySet)
print(ESet)#<enumerate object at 0x000001FC6F6A0120>
print(set(ESet))#{(1, 'DS'), (2, 'BD'), (0, 'DL'), (3, 'ML')}
ESet=enumerate(PySet,300)
print(set(ESet))#{(303, 'ML'), (301, 'DS'), (302, 'BD'), (300, 'DL')}

4/// len ( ):
PySet={1,2,3,4,5,7}
print(len(PySet))#6
PySet={'a','h','c','e'}
print(len(PySet))#4

5/// max ( ):
PySet={1,2,3,4,5,7}
print(max(PySet))#7
PySet={'a','h','c','e'}
print(max(PySet))#h

6/// min ( ):
PySet={1,2,3,4,5,7}
print(min(PySet))#1
PySet={'a','h','c','e'}
print(min(PySet))#a

7/// sorted ( ):
PySet={11,37,45,9,43,80,44}
print(sorted(PySet))#[9, 11, 37, 43, 44, 45, 80]
PySet={'a','h','c','J','a','E'}
print(sorted(PySet))#['E', 'J', 'a', 'c', 'h']

