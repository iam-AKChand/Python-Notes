		LIST
Types of List:

#Nested List
PyList=[1,2,3,"Hello",'a',3.4,['b',3,6]]
print(type(PyList))
print(PyList)#[1, 2, 3, 'Hello', 'a', 3.4, ['b', 3, 6]]

#Mixed List
PyList=[1,2,3,"Hello",'a',3.4,'b',3,6]
print(type(PyList))
print(PyList)#[1, 2, 3, 'Hello', 'a', 3.4, 'b', 3, 6]

#Empty List
PyList=[]
print(type(PyList))
print(PyList)#[ ]

#Integer List
PyList=[1,2,3,6]
print(type(PyList))
print(PyList)

#Char List
PyList=['a','b','c','d']
print(type(PyList))
print(PyList)

#String List
PyList=["Hello","Hi","Bye"]
print(type(PyList))
print(PyList)

#Float List
PyList=[1.3,3.2,8.3,3.4]
print(type(PyList))
print(PyList)

Basic LIst Operations:

PyList1=[1,2,3,4]
PyList2=[5,6,7,8]
#Concatination
PyList3=PyList1+PyList2
print(PyList3)#[1, 2, 3, 4, 5, 6, 7, 8]

#Repetition
print(PyList1*3)#[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
print(PyList2*4)#[5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8]
print(PyList3*2)#[1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8]

#Membership
print(1 in PyList1)#True
print(3 in PyList2)#False
print(2 not in PyList1)#False
print(5 in PyList2)#true
print(5 in PyList3)#True
print(8 not in PyList2)#False

#Iteration
for item in PyList1:
    print(item)#1 2 3 4
for item in PyList3:
    print(item)#1 2 3 4 5 6 7 8
    
#Length
print(len(PyList1))#4
print(len(PyList2))#4
print(len(PyList3))#8

Accessing of Elements From a List:

Ex:
#Example 1
PyList=[1,2,3,4,5]
print(PyList)
print(PyList[1])#2
print(PyList[4])#5
print(PyList[-1])#5
print(PyList[0])#1
print(PyList[-5])#1

#Example 2
PyList=["Hello",1,2,3,[4,5],'a']
print(PyList)
print(PyList[0])#'Hello'
print(PyList[4])#[4,5]
print(PyList[-1])#'a'
print(PyList[-2])#[4,5]
print(PyList[-2][1])#5
print(PyList[4][-2])#4
print(PyList[0][-2])#l
print(PyList[0][3])#l
print(PyList[-6][1])#e

#Example 3
PyList=[["Hello"],1,2,3,[4,5],'a']
print(PyList)
print(PyList[0])#'Hello'
print(PyList[4])#[4,5]
print(PyList[-1])#'a'
print(PyList[-2])#[4,5]
print(PyList[-2][1])#5
print(PyList[4][-2])#4
print(PyList[0][-1][1])#e
print(PyList[0][-1][-1])#o
print(PyList[-6][-1][3])#l

Use of Start:Stop:Step

Ex:
listX=[1,5,7,3,2,4,6]
print(listX)
sublist=listX[2:7:2]
print(sublist)#[7, 2, 6]
sublist=listX[6:2:-1]
print(sublist)#[6, 4, 2, 3]

Double Slice Operator:

Ex:
PyList=[1,2,3,4,5,6,7,8,9,10]
print(PyList[::1])#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(PyList[::2])#[1, 3, 5, 7, 9]
print(PyList[::3])#[1, 4, 7, 10]
print(PyList[::4])#[1, 5, 9]
print(PyList[::-1])#[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
print(PyList[::-2])#[10, 8, 6, 4, 2]
print(PyList[::-3])#[10, 7, 4, 1]
print(PyList[::-4])#[10, 6, 2]

PYTHON LIST METHODS:
1///   append ( ):
Ex:
PyList=[]
print(PyList)#[]
PyList.append(1)
print(PyList)#[1]
PyList.append(2)
print(PyList)#[1, 2]
PyList.append(3)
print(PyList)#[1, 2, 3]
PyList.append(4,5)
print(PyList)#TypeError: append() takes exactly one argument (2 given)

Ex;
PyList=[1,2,3]
print(PyList)#[1, 2, 3]
PyList.append([4,5])
print(PyList)#[1, 2, 3, [4, 5]]

2///  extend ( ):
Ex:
PyList=[1,2,3,4]
print(PyList)#[1, 2, 3, 4]
PyList.extend([5,6,7])
print(PyList)#[1, 2, 3, 4, 5, 6, 7]


3///  insert( ) :
PyList=[1,2,3,4]
print(PyList)#[1, 2, 3, 4]
PyList.insert(3,40)
print(PyList)#[1, 2, 3, 40, 4]

PyList=[1,2,3,4]
PyList.insert(0,100)
print(PyList)#[100, 1, 2, 3, 4]

PyList=[1,2,3,4]
PyList.insert(4,100)
print(PyList)#[1, 2, 3, 4, 100]

4///  remove ( ):
PyList=[1,2,3,4]
print(PyList)#[1, 2, 3, 4]
PyList.remove(3)
print(PyList)#[1, 2, 4]
PyList.remove(2)
print(PyList)#[1, 4]
PyList.remove(4)
print(PyList)#[1]

5///  clear() :
PyList=[1,2,3,4]
print(PyList)#[1, 2, 3, 4]
PyList.clear()
print(PyList)#[ ]

6///  index ( ):
Ex:1
PyList=[1,5,9,10,4,6,13]
print(PyList)#
print(PyList.index(10))#3
print(PyList.index(13))#6
print(PyList.index(5))#1
print(PyList.index(6))#5
print(PyList.index())#TypeError: index() takes at least 1 argument (0 given)

Ex:2
PyList=[1,5,9,10,4,6,1,3]
print(PyList)#
print(PyList.index(5,0,4))#1
print(PyList.index(4,2,7))#4
print(PyList.index(1,4,7))#6
Ex:3
Ex:4

7///  count ( ):
PyList=[1,2,3,4,2,1,3,2]
print(PyList)#[1, 2, 3, 4, 2, 1, 3, 2]
print(PyList.count(2))#3
print(PyList.count(3))#2
print(PyList.count(4))#1

8///  sort ( ):
PyList=[1,5,2,7,9,4,3,5]
print(PyList)#[1, 5, 2, 7, 9, 4, 3, 5]
PyList.sort()
print(PyList)#[1, 2, 3, 4, 5, 5, 7, 9]
PyList.sort(reverse=True)
print(PyList)#[9, 7, 5, 5, 4, 3, 2, 1]

9///  copy ( ):
PyList=['a','e','0','i','o','u']
print(PyList)#['a', 'e', '0', 'i', 'o', 'u']
PyList.copy()
print(PyList)#['a', 'e', '0', 'i', 'o', 'u']

10///  del ( ):
NO USE

Converting a List Into Tuple:
Ex:
PyList=['a','e','0','i','o','u']
print(PyList)#['a', 'e', '0', 'i', 'o', 'u']
PyTuple=tuple(PyList)
print(PyTuple)#('a', 'e', '0', 'i', 'o', 'u')

Compare of 2 lists in Python:
Ex:
PyList1=[1,2,3,4,5]
PyList2=[6,7,8,9]
print(PyList1==PyList2)#False
print(PyList1==PyList2.sort())#False
print(PyList1.sort()==PyList2.sort())#True

Using Lists as Stack:
Ex:
PyList=[1,2,3,4]
print(PyList)#
PyList.append(5)
print(PyList)#[1, 2, 3, 4, 5]
PyList.append(6)
print(PyList)#[1, 2, 3, 4, 5, 6]
PyList.append(7)
print(PyList)#[1, 2, 3, 4, 5,6 ,7]
PyList.pop()
print(PyList)#[1, 2, 3, 4, 5, 6]
PyList.pop()
print(PyList)#[1, 2, 3, 4, 5]

Using List as Queues:
Ex:
from collections import deque
PyList=deque([1,2,3,4])
print(PyList)#deque([1, 2, 3, 4])
PyList.append(5)
print(PyList)#deque([1, 2, 3, 4, 5])
PyList.append(6)
print(PyList)#deque([1, 2, 3, 4, 5, 6])
PyList.append(7)
print(PyList)#deque([1, 2, 3, 4, 5,6 ,7])
PyList.pop()
print(PyList)#deque([1, 2, 3, 4, 5, 6])
PyList.pop()
print(PyList)#deque([1, 2, 3, 4, 5])


Built-in Functions with List:
1///  all ( ) Functions:
all True		True
all Fales		False
one T, others F	False
one F, others T	False
Empty Iterable	True

Ex:
s=[1,2,3,4,5]
print(all(s))#True

s=[0,1,3,6,7]
print(all(s))#False

s=[0,False]
print(all(s))#False

s=[0,False,7]
print(all(s))#False

s=[]
print(all(s))#True

2///  any ( ) Function:

all True		True
all Fales		False
one T, others F	True
one F, others T	True
Empty Iterable	False

Ex:
s=[1,2,3,4,5]
print(any(s))#True

s=[0,1,3,6,7]
print(any(s))#True

s=[0,False]
print(any(s))#False

s=[0,False,7]
print(any(s))#True

s=[]
print(any(s))#False

3///  enumerate ( ) Functions:
Data with enumerate:
Ex:
PyData=["Data","BigData","ML","DL","AI","IoT"]
print(PyData)#['Data', 'BigData', 'ML', 'DL', 'AI', 'IoT']
EData=enumerate(PyData)
print(EData)#<enumerate object at 0x000001FC6F6A0120>
print(list(EData))#[(0, 'Data'), (1, 'BigData'), (2, 'ML'), (3, 'DL'), (4, 'AI'), (5, 'IoT')]
EData=enumerate(PyData,300)
print(list(EData))#[(300, 'Data'), (301, 'BigData'), (302, 'ML'), (303, 'DL'), (304, 'AI'), (305, 'IoT')]

Iterations:
Ex:
for data in enumerate(PyData):
    print(data)
for item,data in enumerate(Pydata,100):
    print(item,data)

4///  len( ) Function:
PyList=[1,2,3,4,5]
print(len(PyList))#5

5///  max ( ) :
PyList=[1,8,11,4,5,9,7]
print(max(PyList))#11
PyList=['h','e','l','l','p','A','Z']
print(max(PyList))#p

6///  min (  ):
PyList=[1,8,11,4,5,9,7]
print(min(PyList))#1
PyList=['h','e','l','l','p','A','Z']
print(min(PyList))#A

7///  sum( ):
PyList=[1,8,11,4,5,9,7]
print(sum(PyList))#45
PyList=[3,5,1,2,0,6]
print(sum(PyList)) #17

List_of_lists :
A=[1]*2
print(A)#[1, 1]
A=[5]*3
print(A)#[5, 5, 5]
Fives=[4]*2
print(Fives)#[4, 4]

A=[[1]*2]*3
print(A)#[[1, 1], [1, 1], [1, 1]]
A=[[3]*4]*2
print(A)#[[3, 3, 3, 3], [3, 3, 3, 3]]

A=[[3,5]*4]*2
print(A)#[[3, 5, 3, 5, 3, 5, 3, 5], [3, 5, 3, 5, 3, 5, 3, 5]]
a=[[7,2,3]*2]*3
print(a)#[[7, 2, 3, 7, 2, 3], [7, 2, 3, 7, 2, 3], [7, 2, 3, 7, 2, 3]]

A=[1,2,3]
print(A[2])#3
a=[3,7,1]
print(a[0])#3

A=[1,2,3]
print(A[2]*3)#9
a=[3,7,1]
print(a[0]*4)#12

Ten=[1,5,6,3]*2
print(Ten)#[1, 5, 6, 3, 1, 5, 6, 3]
print(Ten[5])#5

Tree=[[1,5]*2]*2
print(Tree[2])#IndexError: list index out of range
b=[[1,2,3]*2]*1
print(b[3])#IndexError: list index out of range

A=[[3,5]*4]*2
print(A[0][4])#3
A=[[3,5]*4]*2
print(A[1][7])#5
A=[[3,5,7]*3]*4
print(A[0][3])#3
A=[[3,5,7]*4]*2
print(A[2][4])#IndexError: list index out of range 

List Comprehension:
syntax 1:  [expression for item in iterable]
Ex:
print([x**2 for x in[1,2,3,4]])#[1, 4, 9, 16]
print(x**2 for x in[1,2,3,4])#<generator object <genexpr> at 0x0000019089D68048>
print([x*2 for x in[1,2,3,4]])#[2, 4, 6, 8]

syntax 2: [expression if conditional statement for item in iterable]
Ex:
print([x for x in range(1,10) if x%2==0])#[2, 4, 6, 8]
print([x for x in range(1,10) if x%2!=0])#[1, 3, 5, 7, 9]
print([x**2 for x in range(1,10) if x%2==0])#[4, 16, 36, 64]
print([x**2 for x in range(1,10) if x%2!=0])#[1, 9, 25, 49, 81]

Ex:
str1="Hello1234"
result=[x for x in str1 if x is alpha()]
print(result)
result=[x for x in str1 if x is digit()]
print(result)

Ex:
print([x if x>3 else x+1 for x in [1,2,3,4,5,6] ])#[2, 3, 4, 4, 5, 6]
print([x if x<3 else x+1 for x in [1,2,3,4,5,6] ])#[1, 2, 4, 5, 6, 7]
print([x if x>4 else x+3 for x in [1,2,3,4,5,6] ])#[4, 5, 6, 7, 5, 6]
print([x if x<2 else x-2 for x in [1,2,3,4,5,6] ])#[1, 0, 1, 2, 3, 4]
print([x if x==3 else x-3 for x in [1,2,3,4,5,6] ])#[-2, -1, 3, 1, 2, 3]

Ex:
PyList=["Hello","Python","ML","AI"]
print(item[0] for item in PyList)
print([x if x==4 else x+1 for x in [1,2,3,4,5,6] ])#[2, 3, 4, 4, 6, 7]

Ex:
a=[1,2,3,4,5,6]
b=[2,3,4]
result=[x+y for x in a for y in b]
print(result)#[3, 4, 5, 4, 5, 6, 5, 6, 7, 6, 7, 8, 7, 8, 9, 8, 9, 10]

Hard copy of an object in Python:
Ex:
PyList1=[1,2,3,4,5]
print(PyList1)#[1, 2, 3, 4, 5]
PyList2=PyList1
print(PyList2)#[1, 2, 3, 4, 5]
PyList1.append(7)
print(PyList1)#[1, 2, 3, 4, 5, 7]
print(PyList2)#[1, 2, 3, 4, 5, 7]

Shallow copy (copy.copy())
Ex:
import copy
PyList1=[1,2,3,4,5]
print(PyList1)#[1, 2, 3, 4, 5]
PyList2=copy.copy(PyList1)
print(PyList2)#[1, 2, 3, 4, 5]
PyList1.append(7)
print(PyList1)#[1, 2, 3, 4, 5, 7]
print(PyList2)#[1, 2, 3, 4, 5]

Deep Copy (copy.deepcopy()):
Ex:
import copy
yourlist=[1,2,3,4,['a','b','c']]
mylist=copy.copy(yourlist)
mylist[4][2]="Hei"
print(mylist)#[1, 2, 3, 4, ['a', 'b', 'Hei']]
print(yourlist)#[1, 2, 3, 4, ['a', 'b', 'Hei']]
mylist=copy.deepcopy(yourlist)
mylist[4][1]="Hello"
print(mylist)#[1, 2, 3, 4, ['a', 'Hello', 'Hei']]
print(yourlist)#[1, 2, 3, 4, ['a', 'b', 'Hei']]

zip ( ) in Python:
Ex:1
PyList1=[1,2,3,4,5]
print(PyList1)#[1,2,3,4,5]
Pylist2=["PY","ML","DL","AI","DS"]
print(Pylist2)#["PY","ML","DL","AI","DS"]
ziplist=zip(PyList1,Pylist2)
print(ziplist)#<zip object at 0x0000027796746A48>
print(list(ziplist))#[(1, 'PY'), (2, 'ML'), (3, 'DL'), (4, 'AI'), (5, 'DS')]

Ex:2
PyList1=[1,2,3]
print(PyList1)#[1,2,3]
Pylist2=["PY","ML","DL","AI","DS"]
print(Pylist2)#["PY","ML","DL","AI","DS"]
ziplist=zip(PyList1,Pylist2)
print(ziplist)#<zip object at 0x0000027796746A48>
print(list(ziplist))#[(1, 'PY'), (2, 'ML'), (3, 'DL')]

Ex:3
Pylist1=[1,2,3,4,5]
Pylist2=["PY","ML","DL","AI","DS"]
print(Pylist2)#["PY","ML","DL","AI","DS"]
for l1,l2 in zip(Pylist1,Pylist2):
    print(l1,l2)#1 PY
	       2 ML
	       3 DL
	       4 AI
	       5 DS
Ex:4
Pylist1=[1,2]
Pylist2=[5,3]
ziplist=zip(Pylist1,Pylist2)
ziptuple=zip(Pylist1,Pylist2)
zipset=zip(Pylist1,Pylist2)
zipdict=zip(Pylist1,Pylist2)
print(list(ziplist))#[(1, 5), (2, 3)]
print(tuple(ziptuple))#((1, 5), (2, 3))
print(set(zipset))#{(1, 5), (2, 3)}
print(dict(zipdict))#{1: 5, 2: 3}

Ex:5
players=["AAA","BBB","CCC","DDD","EEE"]
scores=[20,49,101,34,92]
for pl,sc in zip(players,scores):
    print("player:%s score:%d" %(pl,sc))
#player:AAA score:20
#player:BBB score:49
#player:CCC score:101
#player:DDD score:34
#player:EEE score:92

Ex:6
Mylist1=[10,20,30,40]
Mylist2=[50,60,70,80]
for a,b in zip(Mylist1,Mylist2):
    print('{}+{}={}'.format(a,b,a+b))
#10+50=60
#20+60=80
#30+70=100
#40+80=120

How to Unzip ....????
Ex:
Pylist1=["Ram","Hari","Sita"]
Pylist2=["a1","b2","c3"]
z1=zip(Pylist1,Pylist2)#ADD zip format
z2=zip(*z1)#REMOVE zip format
print(*z2)#('Ram', 'Hari', 'Sita') ('a1', 'b2', 'c3')

Line Chart:
Ex:1
import matplotlib.pyplot as plt
x=[1,2,3,6,8,11,16,19,21,26,29,32,39,40,14]
plt.plot(x)
plt.xlabel("Time")
plt.ylabel("Price")
plt.show()

Ex:2
import matplotlib.pyplot as plt
x=[1,2,3,6,8,11,16,19,21,26,29,32,39,40,14]
plt.plot(x,'ro')
plt.xlabel("Time")
plt.ylabel("Price")
plt.show()

Ex3
import matplotlib.pyplot as plt
x=[1,2,3,6,8,11,16,19,21,26,29,32,39,40,14]
plt.plot(x,'ro-')
plt.xlabel("Time")
plt.ylabel("Price")
plt.show()

PYTHON  ARRAY
Access elements of an array:
Ex:
PyArr=[20,18,22,34,56]
print(PyArr[2])#22
print(PyArr[4])#56
print(PyArr[0])#20

Multi-Dimenssional Array:
Ex:
multd=[[1,2],[3,4],[5,6],[7,8]]
print(multd[0])#[1, 2]
print(multd[3])#[7, 8]
print(multd[1])#[3, 4]
print(multd[2][0])#5
print(multd[3][1])#8
print(multd[0][0])#1

Python Matrix:
Ex:
a=[["roy",23,4,54,66,12],["Eve",34,56,98,90,23],["John",11,32,44,66,5]]
print(a[0])#['roy', 23, 4, 54, 66, 12]
print(a[0][2])#4
print(a[1][2])#56
print(a[1][0])#Eve